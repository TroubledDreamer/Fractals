package fractal.semantics;

import fractal.syntax.ASTDrawFractal;
import fractal.syntax.ASTDrawLine;
import fractal.syntax.ASTExpAdd;
import fractal.syntax.ASTExpDiv;
import fractal.syntax.ASTExpHere;
import fractal.syntax.ASTExpLit;
import fractal.syntax.ASTExpMod;
import fractal.syntax.ASTExpMul;
import fractal.syntax.ASTExpPtVar;
import fractal.syntax.ASTExpSub;
import fractal.syntax.ASTExpVar;

import fractal.syntax.ASTFracVar;
import fractal.syntax.ASTDefFractal;

import fractal.syntax.ASTDrawSelf;
import fractal.syntax.ASTExpPtCCRot;
import fractal.syntax.ASTExpNegate;
import fractal.syntax.ASTStmtSequence;

import fractal.syntax.ASTStmtClear;
import fractal.syntax.ASTStmtHome;

import fractal.syntax.ASTProgram;
import fractal.syntax.ASTStmtLet;
// import fractal.syntax.ASTRepeat;
import fractal.sys.FractalException;
import lib3652.util.ASTVisitor;

/**
 * Interface Visitor. Visitor interface auto-generated by CS34Q semantic
 * generator. Created on Sat Oct 12 03:13:16 2013
 *
 * @param <S> The input type of visitor (i.e. the state or context given to each
 * node)
 * @param <T> The return type of the visitor
 */
public interface Visitor<S, T> extends ASTVisitor<S, T> {

    /**
     * Visit a Fractal program
     *
     * @param program The sequence to be visited
     * @param state The context within which the visit should be done
     * @return The combined result of visiting each statement of the sequence
     * @throws FractalException if the sequence is semantically inconsistent
     * with this visitor
     */
    public T visitFractalProgram(ASTProgram program, S state) throws FractalException;

    /**
     * Visit a sequence of statements
     *
     * @param seq The sequence to be visited
     * @param state The context within which the visit should be done
     * @return The combined result of visiting each statement of the sequence
     * @throws FractalException if the sequence is semantically inconsistent
     * with this visitor
     */
    public T visitASTStmtSequence(ASTStmtSequence seq, S state) throws FractalException;

    /**
     * Lookup a fractal identifier.
     * 
     * @param form The (expected) fractal valued variable expression.
     * @param state The current interpreter state
     * @return The fractal result of visiting the variable
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTFracVar(ASTFracVar form, S state) throws FractalException;

    /**
     * Create a new fractal by defining its generator explicitly
     * 
     * @param form The FRACTAL ... END block of code
     * @param state The current interpreter state
     * @return The fractal described by the body in the given block
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTDefFractal(ASTDefFractal form, S state) throws FractalException;

    /**
     * Render the current fractal at 1 level lower than the current invocation.
     * 
     * @param form The SELF statement
     * @param state The current interpreter state
     * @return The result of visiting a SELF statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTDrawSelf(ASTDrawSelf form, S state) throws FractalException;

    /**
     * Visit the command to clear the turtle's display
     * 
     * @param form The CLEAR statement
     * @param state The current interpreter state
     * @return The result of visiting a CLEAR statement
     * @throws FractalException if execution of this statement fails
     */
    public T visitASTStmtClear(ASTStmtClear form, S state) throws FractalException;

    /**
     * Visit the command to reset the turtle to the origin, pointing eastwards
     * 
     * @param form The HOME statement
     * @param state The current interpreter state
     * @return The result of visiting a HOME statement
     * @throws FractalException if execution of this expression fails
     */
    public T visitASTStmtHome(ASTStmtHome form, S state) throws FractalException;
    
    /**
     * Visit a LET statement.
     * @param form The LET statement
     * @param state The current state of the interpreter (including the context)
     * @return No meaningful result is generated by a LET (it could be the point defined)
     * @throws FractalException
     */
    public T visitASTStmtLet(ASTStmtLet form, S state) throws FractalException;
    
    /**
     * Visit a HERE expression
     * @param form The constant HERE form.
     * @param state The current interpreter state (including the context)
     * @return
     * @throws FractalException
     */
    public T visitASTExpHere(ASTExpHere form, S state) throws FractalException;
    
    /**
     * Reduce an expression of the form exp1 + exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpAdd(ASTExpAdd form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 - exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpSub(ASTExpSub form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 * exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpMul(ASTExpMul form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 / exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpDiv(ASTExpDiv form, S state) throws FractalException;

    /**
     * Reduce an expression of the form exp1 % exp2
     * 
     * @param form The expression
     * @param state The current visitor state
     * @return The result of visiting the expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpMod(ASTExpMod form, S state) throws FractalException;

    /**
     * Visit an expression that denotes a fixed constant.
     * 
     * @param form The literal expression
     * @param state The current visitor state
     * @return The result of visiting the constant expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpLit(ASTExpLit form, S state) throws FractalException;
   
    /**
     * Visit a point valued variable.
     * 
     * @param form The variable expression
     * @param state The current visitor state
     * @return The result of visiting the variable expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpPtVar(ASTExpPtVar form, S state) throws FractalException;
    
    /**
     * Visit a numerically valued variable.
     * 
     * @param form The variable expression
     * @param state The current visitor state
     * @return The result of visiting the variable expression
     * @throws FractalException if visiting this expression fails
     */
    public T visitASTExpVar(ASTExpVar form, S state) throws FractalException;

    /**
     * Visit a DRAW LINE command.
     * @param form The DRAW LINE form (with 1 or 2 coordinate expressions)
     * @param state The current state of the visitor.
     * @return The result visiting a DRAW LINE according to its semantics and
     * the purpose of the visitor.
     * @throws fractal.sys.FractalException
     */
    public T visitASTDrawLine(ASTDrawLine form, S state) throws FractalException;

    /**
     * Visit the DRAW <Fractal Name> form.
     * @param form The form with the name and 1 or 2 point expressions.
     * @param state The state of the visitor.
     * @return The result of visiting the DRAW <Fractal Name> form according
     * to its semantics and the purpose of the visitor.
     * @throws fractal.sys.FractalException
     */
    public T visitASTDrawFractal(ASTDrawFractal form, S state) throws FractalException;

    /**
     * Visit the @<angle> point form for specifying a point that is a unit 
     * distance from the origin rotated counter-clockwise by a given angle.
     * @param form The AST expression being visited.
     * @param state The current state providing context for the visitor
     * @return The result of visiting the @<ange> point specifying form.
     * @throws FractalException if the expression for the angle of rotation cannot be visited.
     */
    public T visitASTExpPtCCRot(ASTExpPtCCRot form, S state) throws FractalException;

    /**
     * Visit the !@<angle> point form for specifying a point that is a unit 
     * distance from the origin rotated clockwise by a given angle.
     * @param form The AST expression being visited.
     * @param state The current state providing context for the visitor
     * @return The result of visiting the !@<ange> point specifying form.
     * @throws FractalException if the expression for the angle of rotation cannot be visited.
     */
    public T visitASTExpNegate(ASTExpNegate form, S state) throws FractalException;

}
