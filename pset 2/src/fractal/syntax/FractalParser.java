
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package fractal.syntax;

import java_cup.runtime.*;
import fractal.values.FractalValue;
import fractal.values.FractalPoint;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FractalParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public FractalParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FractalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\007\000\002" +
    "\006\003\000\002\007\010\000\002\007\006\000\002\010" +
    "\010\000\002\010\006\000\002\011\010\000\002\011\006" +
    "\000\002\012\006\000\002\012\006\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\004\000\002\016" +
    "\005\000\002\016\006\000\002\016\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\014\004\007\007\016\012\020\013\014\014" +
    "\004\001\002\000\020\002\ufff8\004\ufff8\006\ufff8\007\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\001\002\000\020\002\ufff9\004" +
    "\ufff9\006\ufff9\007\ufff9\012\ufff9\013\ufff9\014\ufff9\001\002" +
    "\000\020\002\ufffe\004\ufffe\006\ufffe\007\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\001\002\000\004\035\115\001\002\000\004" +
    "\002\114\001\002\000\016\002\001\004\007\007\016\012" +
    "\020\013\014\014\004\001\002\000\020\002\ufffb\004\ufffb" +
    "\006\ufffb\007\ufffb\012\ufffb\013\ufffb\014\ufffb\001\002\000" +
    "\020\002\ufffa\004\ufffa\006\ufffa\007\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\001\002\000\020\002\ufff7\004\ufff7\006\ufff7\007" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\001\002\000\020\002\ufffd" +
    "\004\ufffd\006\ufffd\007\ufffd\012\ufffd\013\ufffd\014\ufffd\001" +
    "\002\000\010\005\067\016\066\035\070\001\002\000\020" +
    "\002\ufffc\004\ufffc\006\ufffc\007\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\001\002\000\006\036\021\037\022\001\002\000\004" +
    "\025\025\001\002\000\004\025\023\001\002\000\002\001" +
    "\002\000\020\002\uffed\004\uffed\006\uffed\007\uffed\012\uffed" +
    "\013\uffed\014\uffed\001\002\000\026\015\037\021\043\023" +
    "\032\027\026\033\027\034\036\036\034\040\041\041\035" +
    "\042\042\001\002\000\026\015\037\021\043\023\032\027" +
    "\026\033\027\034\036\036\034\040\041\041\035\042\042" +
    "\001\002\000\040\002\uffde\004\uffde\006\uffde\007\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\022\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\041\063\042\064\001\002\000\034\002" +
    "\uffea\004\uffea\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\022\uffea\026\uffea\027\uffea\030\051\031\052\001" +
    "\002\000\034\002\uffe3\004\uffe3\006\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\022\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\001\002\000\004\021\060\001\002\000\024" +
    "\002\uffee\004\uffee\006\uffee\007\uffee\012\uffee\013\uffee\014" +
    "\uffee\026\046\027\047\001\002\000\034\002\uffdc\004\uffdc" +
    "\006\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\022" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\001\002\000\034" +
    "\002\uffd9\004\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\022\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\001\002\000\040\002\uffdd\004\uffdd\006\uffdd\007\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\022\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\041\056\042\057\001\002\000\034\002" +
    "\uffdb\004\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\022\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\001" +
    "\002\000\034\002\uffe7\004\uffe7\006\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\022\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\001\002\000\034\002\uffda\004\uffda\006\uffda" +
    "\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\022\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\001\002\000\034\002\uffd8" +
    "\004\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\022\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\001\002" +
    "\000\026\015\037\021\043\023\032\027\026\033\027\034" +
    "\036\036\034\040\041\041\035\042\042\001\002\000\010" +
    "\022\045\026\046\027\047\001\002\000\034\002\uffe5\004" +
    "\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\022\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\001\002\000" +
    "\026\015\037\021\043\023\032\027\026\033\027\034\036" +
    "\036\034\040\041\041\035\042\042\001\002\000\026\015" +
    "\037\021\043\023\032\027\026\033\027\034\036\036\034" +
    "\040\041\041\035\042\042\001\002\000\034\002\uffeb\004" +
    "\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\022\uffeb\026\uffeb\027\uffeb\030\051\031\052\001\002\000" +
    "\026\015\037\021\043\023\032\027\026\033\027\034\036" +
    "\036\034\040\041\041\035\042\042\001\002\000\026\015" +
    "\037\021\043\023\032\027\026\033\027\034\036\036\034" +
    "\040\041\041\035\042\042\001\002\000\034\002\uffe8\004" +
    "\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\022\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\001\002\000" +
    "\034\002\uffe9\004\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\022\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\001\002\000\034\002\uffec\004\uffec\006\uffec\007\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\022\uffec\026\uffec\027" +
    "\uffec\030\051\031\052\001\002\000\034\002\uffe1\004\uffe1" +
    "\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\022" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\001\002\000\034" +
    "\002\uffdf\004\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\022\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\001\002\000\002\001\002\000\004\022\062\001\002\000" +
    "\034\002\uffe4\004\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\022\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\001\002\000\034\002\uffe2\004\uffe2\006\uffe2\007\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\022\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\001\002\000\034\002\uffe0\004\uffe0" +
    "\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\022" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\001\002\000\034" +
    "\002\uffe6\004\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\022\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\001\002\000\006\010\106\011\105\001\002\000\006\010" +
    "\100\011\077\001\002\000\006\010\072\011\071\001\002" +
    "\000\026\015\037\021\043\023\032\027\026\033\027\034" +
    "\036\036\034\040\041\041\035\042\042\001\002\000\026" +
    "\015\037\021\043\023\032\027\026\033\027\034\036\036" +
    "\034\040\041\041\035\042\042\001\002\000\010\011\074" +
    "\026\046\027\047\001\002\000\026\015\037\021\043\023" +
    "\032\027\026\033\027\034\036\036\034\040\041\041\035" +
    "\042\042\001\002\000\024\002\ufff4\004\ufff4\006\ufff4\007" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\026\046\027\047\001\002" +
    "\000\024\002\ufff3\004\ufff3\006\ufff3\007\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\026\046\027\047\001\002\000\026\015\037" +
    "\021\043\023\032\027\026\033\027\034\036\036\034\040" +
    "\041\041\035\042\042\001\002\000\026\015\037\021\043" +
    "\023\032\027\026\033\027\034\036\036\034\040\041\041" +
    "\035\042\042\001\002\000\010\011\102\026\046\027\047" +
    "\001\002\000\026\015\037\021\043\023\032\027\026\033" +
    "\027\034\036\036\034\040\041\041\035\042\042\001\002" +
    "\000\024\002\ufff2\004\ufff2\006\ufff2\007\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\026\046\027\047\001\002\000\024\002\ufff1" +
    "\004\ufff1\006\ufff1\007\ufff1\012\ufff1\013\ufff1\014\ufff1\026" +
    "\046\027\047\001\002\000\026\015\037\021\043\023\032" +
    "\027\026\033\027\034\036\036\034\040\041\041\035\042" +
    "\042\001\002\000\026\015\037\021\043\023\032\027\026" +
    "\033\027\034\036\036\034\040\041\041\035\042\042\001" +
    "\002\000\010\011\110\026\046\027\047\001\002\000\026" +
    "\015\037\021\043\023\032\027\026\033\027\034\036\036" +
    "\034\040\041\041\035\042\042\001\002\000\024\002\ufff0" +
    "\004\ufff0\006\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0\026" +
    "\046\027\047\001\002\000\024\002\uffef\004\uffef\006\uffef" +
    "\007\uffef\012\uffef\013\uffef\014\uffef\026\046\027\047\001" +
    "\002\000\020\002\uffff\004\uffff\006\uffff\007\uffff\012\uffff" +
    "\013\uffff\014\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\020\116\001\002\000\014\004\007\007\016\012\020" +
    "\013\014\014\004\001\002\000\016\004\007\006\ufff5\007" +
    "\016\012\020\013\014\014\004\001\002\000\004\006\121" +
    "\001\002\000\020\002\ufff6\004\ufff6\006\ufff6\007\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\022\002\007\003\010\004\005\005\014\007" +
    "\016\010\011\011\012\012\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\112\005\014\007\016\010\011" +
    "\011\012\012\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\023\001\001\000\002\001\001" +
    "\000\012\013\032\015\027\016\037\017\030\001\001\000" +
    "\006\016\064\017\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\043\015\027\016\037\017\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\054\016\037\017\030\001\001\000\010\015\047\016\037" +
    "\017\030\001\001\000\002\001\001\000\006\016\053\017" +
    "\030\001\001\000\006\016\052\017\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\075\015\027\016\037\017" +
    "\030\001\001\000\012\013\072\015\027\016\037\017\030" +
    "\001\001\000\002\001\001\000\012\013\074\015\027\016" +
    "\037\017\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\103\015\027\016\037\017\030\001\001\000" +
    "\012\013\100\015\027\016\037\017\030\001\001\000\002" +
    "\001\001\000\012\013\102\015\027\016\037\017\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\111" +
    "\015\027\016\037\017\030\001\001\000\012\013\106\015" +
    "\027\016\037\017\030\001\001\000\002\001\001\000\012" +
    "\013\110\015\027\016\037\017\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\116\004\005\005\014\006" +
    "\117\007\016\010\011\011\012\012\004\001\001\000\016" +
    "\004\112\005\014\007\016\010\011\011\012\012\004\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FractalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FractalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FractalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        FractalLexer lexer;

        public FractalParser(FractalLexer l) {
            super(l);
            lexer = l;
        }

        public void report_error(String message, Object info) {
            System.err.println(message);
        }

        public void syntax_error(Symbol cur_token) {
            System.err.print("Line " + lexer.getLine() +
                             " near char " + lexer.getChar() + ": ");
            report_error("Syntax error", cur_token);            
            System.err.println("Last token read: " + lexer.getText());
        }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FractalParser$actions {
  private final FractalParser parser;

  /** Constructor */
  CUP$FractalParser$actions(FractalParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FractalParser$do_action_part00000000(
    int                        CUP$FractalParser$act_num,
    java_cup.runtime.lr_parser CUP$FractalParser$parser,
    java.util.Stack            CUP$FractalParser$stack,
    int                        CUP$FractalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FractalParser$result;

      /* select the action based on the action number */
      switch (CUP$FractalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ASTProgram RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStmtSequence statements = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTProgram(statements); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTProgram start_val = (ASTProgram)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		RESULT = start_val;
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FractalParser$parser.done_parsing();
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              ASTStmtSequence RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence list = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement statement = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 list.add(statement); RESULT = list; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              ASTStmtSequence RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement statement = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTStmtSequence(statement); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= fracDefn 
            {
              ASTStatement RESULT =null;
		int definitionleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int definitionright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTDefFractal definition = (ASTDefFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = definition; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= drawFractal 
            {
              ASTStatement RESULT =null;
		int fractalleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fractalright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTDrawFractal fractal = (ASTDrawFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = fractal; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= drawSelf 
            {
              ASTStatement RESULT =null;
		int selfleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int selfright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTDrawSelf self = (ASTDrawSelf)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = self; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= drawLine 
            {
              ASTStatement RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTDrawLine line = (ASTDrawLine)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = line; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= letStmt 
            {
              ASTStatement RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStmtLet let = (ASTStmtLet)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = let; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= CLEAR 
            {
              ASTStatement RESULT =null;
		 RESULT = new ASTStmtClear(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= HOME 
            {
              ASTStatement RESULT =null;
		 RESULT = new ASTStmtHome(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fracDefn ::= FRACTAL FRACTAL_ID COLON fracBody END 
            {
              ASTDefFractal RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence body = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTDefFractal(name, body); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracDefn",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fracBody ::= stmtList 
            {
              ASTStmtSequence RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStmtSequence list = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = list; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracBody",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // drawFractal ::= DRAW FRACTAL_ID FROM ptExp TO ptExp 
            {
              ASTDrawFractal RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).value;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp source = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int destinationleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int destinationright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp destination = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDrawFractal(name, source, destination); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("drawFractal",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // drawFractal ::= DRAW FRACTAL_ID TO ptExp 
            {
              ASTDrawFractal RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int destinationleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int destinationright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp destination = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDrawFractal(name, destination); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("drawFractal",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // drawSelf ::= DRAW SELF FROM ptExp TO ptExp 
            {
              ASTDrawSelf RESULT =null;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp source = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int destinationleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int destinationright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp destination = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDrawSelf(source, destination); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("drawSelf",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // drawSelf ::= DRAW SELF TO ptExp 
            {
              ASTDrawSelf RESULT =null;
		int destinationleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int destinationright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp destination = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDrawSelf(destination); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("drawSelf",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // drawLine ::= DRAW LINE FROM ptExp TO ptExp 
            {
              ASTDrawLine RESULT =null;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp source = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int destinationleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int destinationright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp destination = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDrawLine(source, destination); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("drawLine",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-5)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // drawLine ::= DRAW LINE TO ptExp 
            {
              ASTDrawLine RESULT =null;
		int destinationleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int destinationright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp destination = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDrawLine(destination); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("drawLine",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // letStmt ::= LET POINT_ID EQUAL ptExp 
            {
              ASTStmtLet RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp expression = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTStmtLet(name, expression); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("letStmt",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // letStmt ::= LET NUM_ID EQUAL expression 
            {
              ASTStmtLet RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp expression = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTStmtLet(name, expression); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("letStmt",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ptExp ::= ptExp PLUS term 
            {
              ASTExp RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp left = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp right = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 
                RESULT = new ASTExpAdd(left, right); 
            
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("ptExp",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ptExp ::= ptExp MINUS term 
            {
              ASTExp RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp left = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp right = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 
                RESULT = new ASTExpSub(left, right); 
            
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("ptExp",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ptExp ::= term 
            {
              ASTExp RESULT =null;
		int singleleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp single = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 
                RESULT = single; 
            
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("ptExp",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= term MUL factor 
            {
              ASTExp RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp left = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp right = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpMul(left, right); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term DIV factor 
            {
              ASTExp RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp left = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp right = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpDiv(left, right); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= factor 
            {
              ASTExp RESULT =null;
		int singleleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp single = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = single; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= MINUS factor 
            {
              ASTExp RESULT =null;
		int negativeleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int negativeright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp negative = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpNegate(negative); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= LPAREN ptExp RPAREN 
            {
              ASTExp RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp expression = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = expression; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= CCROT LPAREN expression RPAREN 
            {
              ASTExp RESULT =null;
		int angleleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int angleright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp angle = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTExpPtCCRot(angle); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= number 
            {
              ASTExp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp value = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = value; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // number ::= INT X_UNIT 
            {
              ASTExp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 
               RESULT = new ASTExpLit(FractalValue.make(
                   FractalPoint.X_UNIT.scale((float) value).getX(),
                   FractalPoint.X_UNIT.scale((float) value).getY())); 
           
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // number ::= REAL X_UNIT 
            {
              ASTExp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 
               RESULT = new ASTExpLit(FractalValue.make(
                   FractalPoint.X_UNIT.scale(value.floatValue()).getX(),
                   FractalPoint.X_UNIT.scale(value.floatValue()).getY())); 
           
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // number ::= INT Y_UNIT 
            {
              ASTExp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 
               RESULT = new ASTExpLit(FractalValue.make(
                   FractalPoint.Y_UNIT.scale((float) value).getX(),
                   FractalPoint.Y_UNIT.scale((float) value).getY())); 
           
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // number ::= REAL Y_UNIT 
            {
              ASTExp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 
               RESULT = new ASTExpLit(FractalValue.make(
                   FractalPoint.Y_UNIT.scale(value.floatValue()).getX(),
                   FractalPoint.Y_UNIT.scale(value.floatValue()).getY())); 
           
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // number ::= INT 
            {
              ASTExp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(FractalValue.make(value)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // number ::= REAL 
            {
              ASTExp RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(FractalValue.make(value)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // number ::= POINT_ID 
            {
              ASTExp RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpPtVar(identifier); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // number ::= HERE 
            {
              ASTExp RESULT =null;
		 RESULT = new ASTExpHere(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // number ::= ORIGIN 
            {
              ASTExp RESULT =null;
		 RESULT = new ASTExpLit(FractalPoint.ORIGIN); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // number ::= X_UNIT 
            {
              ASTExp RESULT =null;
		 RESULT = new ASTExpLit(FractalPoint.X_UNIT); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // number ::= Y_UNIT 
            {
              ASTExp RESULT =null;
		 RESULT = new ASTExpLit(FractalPoint.Y_UNIT); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FractalParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FractalParser$do_action(
    int                        CUP$FractalParser$act_num,
    java_cup.runtime.lr_parser CUP$FractalParser$parser,
    java.util.Stack            CUP$FractalParser$stack,
    int                        CUP$FractalParser$top)
    throws java.lang.Exception
    {
              return CUP$FractalParser$do_action_part00000000(
                               CUP$FractalParser$act_num,
                               CUP$FractalParser$parser,
                               CUP$FractalParser$stack,
                               CUP$FractalParser$top);
    }
}

}
