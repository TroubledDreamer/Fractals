package fractal.syntax;

import fractal.semantics.Visitor;
import fractal.sys.FractalException;
import java.util.ArrayList;

/**
 * Class ASTFractal. Intermediate representation class autogenerated by CS34Q
 * semantic generator. Created on Sat Oct 12 03:13:16 2013
 */
public class ASTDefFractal extends ASTStatement {

    String name;
    ASTStmtSequence body;

    public ASTDefFractal(String name, ASTStmtSequence body) {
        this.name = name;
        this.body = body;
    }
    
    public String getFracName() {
        return name;
    }

    public ASTStmtSequence getBody() {
        return body;
    }

    /**
     * The method called when we would like the visitor to evaluate its
     * corresponding method starting from the ASTNode subtype(s).
     *
     * @param <S> The input type (type of state or context)
     * @param <T> The output type
     * @param v The visitor to be used with this tree.
     * @param state The context or state needed by the visitor
     * @return An instance of the generaic type T.
     * @throws FractalException
     */
    @Override
    public <S, T> T visit(Visitor<S, T> v, S state) throws FractalException {
        return v.visitASTDefFractal(this, state);
    }
    
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("FRACTAL").append(name).append("\n");
        result.append(body.toString(2));
        result.append("END");
        return result.toString();        
    }
}
