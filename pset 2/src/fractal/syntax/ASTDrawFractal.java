package fractal.syntax;

import fractal.semantics.Visitor;
import fractal.sys.FractalException;

/**
  Class ASTDrawFractal to represent a DRAW <Fractal Name> form.
  Intermediate representation class autogenerated by CS34Q semantic generator.
  Created on Sat Oct 12 03:13:16 2013
*/
public class ASTDrawFractal extends ASTStatement {
    String fractalName;

  public ASTDrawFractal (String name, ASTExp srcExp, ASTExp destExp) {
      super("DRAW SELF", srcExp, destExp);
      fractalName = name;
  }
  
  public ASTDrawFractal(String name, ASTExp destExp) {
      this(name,null, destExp);
  }

  public String getFractalName() {
      return fractalName;
  }
  
  public ASTExp getSrcExp() {
      return (ASTExp) getSubTree(0);
  }

  public ASTExp getDestExp() {
      return (ASTExp) getSubTree(1);
  }
  
  @Override
  public <S, T> T visit(Visitor<S, T> v, S state) throws FractalException {
    return v.visitASTDrawFractal(this, state);
  }
  
  @Override
  public String toString() {
      String cmd = getName();
      String destExp = getDestExp().toString();
      ASTExp srcExp = getSrcExp();
      if (srcExp == null) {
          return String.format("%s TO %s", cmd, destExp);
      } else {
          return String.format("%s FROM %s TO %s", cmd, srcExp.toString(), destExp);
      }
  }

}
